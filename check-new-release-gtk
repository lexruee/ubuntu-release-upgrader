#!/usr/bin/python

import warnings
warnings.filterwarnings("ignore", "apt API not stable yet", FutureWarning)
import apt
import gobject
import glib
import gtk
import logging
import sys
import time

import UpdateManager.GtkProgress

from gettext import gettext as _
from optparse import OptionParser

from DistUpgrade.utils import init_proxy

from UpdateManager.DistUpgradeFetcher import DistUpgradeFetcherGtk
from UpdateManager.MetaReleaseGObject import MetaRelease
from UpdateManager.SimpleGtkbuilderApp import SimpleGtkbuilderApp

gobject.threads_init()

# overwrite default upgrade fetcher and make it not show the
# release notes by default
class DistUpgradeFetcher(DistUpgradeFetcherGtk):
    def showReleaseNotes(self):
      # nothing to do
      return True


class CheckNewReleaseGtk(SimpleGtkbuilderApp):
  """ Gtk verson of the release notes check/download """

  # the timeout until we give up
  FETCH_TIMEOUT = 10

  def __init__(self, options):
    SimpleGtkbuilderApp.__init__(self, options.datadir+"glade/UpgradePromptDialog.ui", "update-manager")
    self.new_dist = None
    m = MetaRelease(useDevelopmentRelease=options.devel_release,
                    useProposed=options.proposed_release)
    m.connect("new-dist-available", self.new_dist_available)
    # useful for testing
    if options.test_uri:
        self.build_ui()
        self.show_uri(options.test_uri)
    else:
        glib.timeout_add_seconds(self.FETCH_TIMEOUT, self.timeout)


  def new_dist_available(self, meta_release, new_dist):
    self.new_dist = new_dist
    self.build_ui()
    html_uri = new_dist.releaseNotesHtmlUri
    self.show_uri(html_uri)
  
  def build_ui(self):
    import webkit
    self.webkit_view = webkit.WebView()
    self.webkit_view.show()
    settings = self.webkit_view.get_settings()
    settings.set_property("enable-plugins", False)
    # FIXME: do we want to have it in a gtk.ScrolledWindow ?
    #self.alignment_webkit_view.add(self.webkit_view)
    self.scrolledwindow_webkit_view.add(self.webkit_view)

  def on_button_upgrade_now_clicked(self, button):
    print "upgrade now"
    # FIXME: add inline fetch progress
    import apt.progress
    progress = apt.progress.TextFetchProgress()
    fetcher = DistUpgradeFetcher(new_dist=self.new_dist, 
                                 parent=self,
                                 progress=progress)
    res = fetcher.run()

  def on_button_ask_me_later_clicked(self, button):
    print "ask me later"
    gtk.main_quit()

  def on_button_dont_upgrade_clicked(self, button):
    print "don't upgrade"
    gtk.main_quit()

  def on_linkbutton_release_notes_clicked(self, linkbutton):
    print "STUB: show release notes"

  def show_uri(self, uri):
    self.webkit_view.open(uri)
    self.webkit_view.connect("load-finished", self._on_load_finished)

  def _on_load_finished(self, view, frame):
    self.window_main.show_all()

  def timeout(self):
    if self.new_dist is None:
      logging.warn("timeout reached, exiting")
      gtk.main_quit()

if __name__ == "__main__":

  init_proxy()

  parser = OptionParser()
  parser.add_option ("-d", "--devel-release", action="store_true",
                     dest="devel_release", default=False,
                     help=_("Check if upgrading to the latest devel release "
                          "is possible"))
  parser.add_option ("-p", "--proposed", action="store_true",
                     dest="proposed_release", default=False,
                     help=_("Try upgrading to the latest release using "
                            "the upgrader from $distro-proposed"))
  # mostly useful for development
  parser.add_option ("", "--datadir", default="/usr/share/update-manager")
  parser.add_option ("", "--test-uri")
  (options, args) = parser.parse_args()

  # create object
  cnr = CheckNewReleaseGtk(options)
 
  gtk.main()

